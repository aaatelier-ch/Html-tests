<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Advanced Sticky Notes</title>
  <style>
    body {
      margin: 0;
      font-family: sans-serif;
      background: #f0f0f0;
    }

    #topbar {
      position: fixed;
      top: 10px;
      left: 10px;
      z-index: 1000;
      display: flex;
      gap: 10px;
      align-items: center;
    }

    #addNote, #searchInput {
      padding: 8px 12px;
      font-size: 14px;
    }

    .note {
      position: absolute;
      width: 300px;
      min-height: 100px;
      background: #fffdd0;
      border: 1px solid #ccc;
      padding: 10px;
      box-shadow: 2px 2px 10px rgba(0,0,0,0.2);
      border-radius: 5px;
      box-sizing: border-box;
      resize: both;
      overflow: auto;
      cursor: grab;
    }

    .note textarea {
      width: 100%;
      border: none;
      background: transparent;
      font-size: 14px;
      font-family: inherit;
      outline: none;
      box-sizing: border-box;
      resize: none;
    }

    .note .preview {
      margin-top: 5px;
    }

    .note-buttons {
      display: flex;
      justify-content: space-between;
      margin-bottom: 5px;
    }

    .note-buttons button {
      font-size: 12px;
      padding: 3px 6px;
    }

    .hidden {
      display: none;
    }

    #archive {
      position: fixed;
      bottom: 0;
      width: 100%;
      background: #eeeeee;
      border-top: 2px solid #aaa;
      padding: 10px;
      box-sizing: border-box;
      max-height: 30px;
      overflow: hidden;
      transition: max-height 0.3s ease;
    }

    #archive.expanded {
      max-height: 300px;
      overflow-y: auto;
    }

    #archive h3 {
      margin: 0;
      cursor: pointer;
    }

    #archiveContent {
      margin-top: 10px;
      font-size: 14px;
    }

    input[type="checkbox"] {
      transform: scale(1.2);
    }
  </style>
</head>
<body>

  <div id="topbar">
    <button id="addNote">Add Note</button>
    <input type="text" id="searchInput" placeholder="Search by tag...">
  </div>

  <div id="archive">
    <h3 id="archiveToggle">Archived Tasks (click to expand)</h3>
    <div id="archiveContent"></div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

  <script>
    const notes = JSON.parse(localStorage.getItem('notes') || '[]');
    const archiveTasks = JSON.parse(localStorage.getItem('archive') || '[]');

    function saveNotes() {
      localStorage.setItem('notes', JSON.stringify(notes));
    }

    function saveArchive() {
      localStorage.setItem('archive', JSON.stringify(archiveTasks));
      renderArchive();
    }

    function renderArchive() {
      const archiveContent = document.getElementById('archiveContent');
      archiveContent.innerHTML = archiveTasks.map(item => `<div>- [x] ${item}</div>`).join('');
    }

    function createNote(data = {}) {
      const note = document.createElement('div');
      note.className = 'note';
      note.style.top = data.top || '100px';
      note.style.left = data.left || '100px';

      const buttons = document.createElement('div');
      buttons.className = 'note-buttons';

      const saveBtn = document.createElement('button');
      saveBtn.textContent = 'Save';

      const delBtn = document.createElement('button');
      delBtn.textContent = 'Delete';

      const editBtn = document.createElement('button');
      editBtn.textContent = 'Edit';

      buttons.appendChild(saveBtn);
      buttons.appendChild(editBtn);
      buttons.appendChild(delBtn);

      const textarea = document.createElement('textarea');
      textarea.value = data.content || '';

      const preview = document.createElement('div');
      preview.className = 'preview';

      note.appendChild(buttons);
      note.appendChild(textarea);
      note.appendChild(preview);
      document.body.appendChild(note);

      // Dragging
      let offsetX, offsetY;
      note.addEventListener('mousedown', function (e) {
        if (['TEXTAREA', 'BUTTON', 'INPUT'].includes(e.target.tagName)) return;
        offsetX = e.clientX - note.offsetLeft;
        offsetY = e.clientY - note.offsetTop;
        function moveAt(e) {
          note.style.left = `${e.clientX - offsetX}px`;
          note.style.top = `${e.clientY - offsetY}px`;
        }
        function stop() {
          document.removeEventListener('mousemove', moveAt);
          document.removeEventListener('mouseup', stop);
          saveState();
        }
        document.addEventListener('mousemove', moveAt);
        document.addEventListener('mouseup', stop);
      });

      // Auto-resize textarea
      textarea.addEventListener('input', () => {
        textarea.style.height = 'auto';
        textarea.style.height = textarea.scrollHeight + 'px';
      });
      textarea.dispatchEvent(new Event('input'));

      function saveState() {
        const id = data.id || Date.now();
        const index = notes.findIndex(n => n.id === id);
        const noteData = {
          id,
          content: textarea.value,
          top: note.style.top,
          left: note.style.left
        };
        if (index > -1) {
          notes[index] = noteData;
        } else {
          notes.push(noteData);
        }
        saveNotes();
      }

      function renderMarkdownAndCheck() {
        const raw = textarea.value;
        let output = marked.parse(raw);

        // Extract completed checkboxes
        const lines = raw.split('\n');
        const unchecked = [];
        for (let line of lines) {
          if (line.match(/^- \[x\] /i)) {
            const text = line.replace(/^- \[x\] /i, '').trim();
            archiveTasks.push(text);
          } else {
            unchecked.push(line);
          }
        }

        // Remove checked lines from textarea
        if (unchecked.length !== lines.length) {
          textarea.value = unchecked.join('\n');
          textarea.dispatchEvent(new Event('input'));
          saveArchive();
        }

        preview.innerHTML = marked.parse(textarea.value);
      }

      saveBtn.onclick = () => {
        renderMarkdownAndCheck();
        textarea.style.display = 'none';
        preview.style.display = 'block';
        saveState();
      };

      editBtn.onclick = () => {
        textarea.style.display = 'block';
        preview.style.display = 'none';
      };

      delBtn.onclick = () => {
        note.remove();
        const index = notes.findIndex(n => n.id === data.id);
        if (index > -1) {
          notes.splice(index, 1);
          saveNotes();
        }
      };

      // Initial mode
      if (data.content) {
        renderMarkdownAndCheck();
        textarea.style.display = 'none';
        preview.style.display = 'block';
      }
    }

    // Load notes
    notes.forEach(n => createNote(n));
    renderArchive();

    document.getElementById('addNote').onclick = () => createNote();

    // Filter
    document.getElementById('searchInput').addEventListener('input', (e) => {
      const keyword = e.target.value.toLowerCase();
      document.querySelectorAll('.note').forEach(note => {
        const content = note.querySelector('textarea')?.value || note.querySelector('.preview')?.innerText;
        const titleLine = content.split('\n').find(line => line.startsWith('#')) || '';
        const tag = titleLine.replace('#', '').trim().toLowerCase();
        note.style.display = tag.includes(keyword) ? 'block' : 'none';
      });
    });

    // Archive toggle
    document.getElementById('archiveToggle').addEventListener('click', () => {
      document.getElementById('archive').classList.toggle('expanded');
    });
  </script>

</body>
</html>